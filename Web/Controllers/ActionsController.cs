

using Core;
using Core.Concepts.AppDatabase.Repositories;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http.Extensions;
using Microsoft.AspNetCore.Mvc;
using NSwag;
using NSwag.CodeGeneration.TypeScript;
using oledid.SyntaxImprovement;
using Web.Code;

namespace Web.Controllers
{
	[ApiController]
	[AllowAnonymous]
	[ResponseCache(NoStore = true, Location = ResponseCacheLocation.None)]
	[Route("/Secure/[controller]/[action]")]
	public class ActionsController : ControllerBase
	{
		private readonly IConfiguration configuration;
		private readonly IStatusRepository statusRepository;

		public ActionsController(IConfiguration configuration, IStatusRepository adminRepository)
		{
			this.configuration = configuration;
			this.statusRepository = adminRepository;
		}

		/// <summary>
		/// Debug API:
		/// Throw an error
		/// </summary>
		/// <exception cref="Exception">
		/// This method always trows an error for debuging
		/// </exception>
		public async Task<IActionResult> ThrowError()
		{
			throw new Exception("Dette er en test-feilmelding");
		}

		/// <summary>
		/// Dev API:
		/// Generates typescript fetch methods from controller classes
		/// </summary>
		/// <returns cref="IActionResult">
		/// Returns Ok result if method runs without error
		/// </returns>
		/// <exception cref="NotSupportedException">
		/// Throws error if run in prod
		/// </exception>
		public async Task<IActionResult> GenerateTsFromSwagger()
		{
			if (HttpContext.Request.GetDisplayUrl().ToLowerInvariant().StartsWith("https://local.paakobla.no") == false)
			{
				throw new NotSupportedException();
			}

			var urlHelper = new UrlHelper(configuration);
			var document = await OpenApiDocument.FromUrlAsync(urlHelper.ResolveUrl("~/swagger/v1/swagger.json"));

			var settings = new TypeScriptClientGeneratorSettings
			{
				ClassName = "{controller}Client"
			};

			var generator = new BugfixedTypeScriptClientGenerator(document, settings);
			var code = generator.GenerateFile();

			var path = Path.GetFullPath(Path.Join(CompilerInformation.GetCallerSourceFilePath(), "../../wwwroot/scripts/autogeneratedServices.ts"));
			var file = new FileInfo(path);
			Console.WriteLine("Writing TS interfaces to: " + file.FullName);
			await System.IO.File.WriteAllTextAsync(file.FullName, "// Autogenerated on build - do not edit\r\n\r\n" + code);

			return Content("OK", "text/plain");
		}

		/// <summary>
		/// Debug API:
		/// Simulates admin module by setting danger level to normal
		/// </summary>
		/// <returns>
		/// Returns Ok result if method runs without error
		/// </returns>
		public async Task<IActionResult> SetStatusToNormal()
		{
			await using var connection = await AppDatabaseRepository.OpenConnectionAsync(configuration);
			await statusRepository.SetActiveStatus(connection, 1);
			return Content("OK", "text/plain");
		}

		/// <summary>
		/// Debug API:
		/// Simulates admin module by setting danger level to warning
		/// </summary>
		/// <returns>
		/// Returns Ok result if method runs without error
		/// </returns>
		public async Task<IActionResult> SetStatusToWarning()
		{
			await using var connection = await AppDatabaseRepository.OpenConnectionAsync(configuration);
			await statusRepository.SetActiveStatus(connection, 2);
			return Content("OK", "text/plain");
		}

		/// <summary>
		/// Debug API:
		/// Simulates admin module by setting danger level to danger
		/// </summary>
		/// <returns>
		/// Returns Ok result if method runs without error
		/// </returns>
		public async Task<IActionResult> SetStatusToDanger()
		{
			await using var connection = await AppDatabaseRepository.OpenConnectionAsync(configuration);
			await statusRepository.SetActiveStatus(connection, 3);
			return Content("OK", "text/plain");
		}
	}
}
